{
  "hash": "5cb44bcc379a999c7db2403cc81a3884",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Modeling Heat Flow - Part 2b\"\ndescription: \"Visualizing a (toy) hot box\"\nauthor: \"Steven Wolf\"\ndate: \"12/10/2024\"\nnumber-sections: false\ncategories:\n  - Heat Equation\n  - Python\n  - Modeling\n  - 3D system\n  - Finite Difference Method\n  - Animating Plots\nexecute: \n  messages: false\n  warning: false\njupyter: python3\ndraft:\n  false\n---\n\n\n## Visualizing a hot box\n\nI've been [recently modeling a simple system](heatEqn2.qmd) using the heat equation. That last post was full of math, and finally got to making a nice looking visualization. But it was a *long* time to get there, and I wanted a post that got to the \"pretty pictures\" part much faster. Plus, I needed to spend time figuring out how to make them look nice.  When the \"do math\" part of my brain fights with the \"make it look good\" part of my brain, the math part wins because if the math part loses, the looking good part doesn't matter (because it's probably wrong). But the \"make it look good\" part is equally important for good scientific communication. Therefore, this post is important too, and hopefully, more readable that the previous post.\n\n### Toy model\nAs I wanted to get solar heat generation working, I started by making it simple. The premise was this. Consider the following information from [The Humane Society](https://www.humanesociety.org/resources/what-do-if-you-see-pet-parked-car).\n\n> - When it's 72 degrees Fahrenheit outside, the temperature inside your car can heat up to 116 degrees Fahrenheit within an hour.\n> - When it's 80 degrees Fahrenheit outside, the temperature inside your car can heat up to 99 degrees Fahrenheit within 10 minutes.\n> - Rolling down the windows has been shown to have little effect on the temperature inside a car.\n\nAssume the above information is correct, and find appropriate parameters to make it so. I did that by assuming the sun is at solar noon (directly overhead) and we are getting direct sunlight at our particular latitude (so it is solar noon on the equinox/first day of spring/fall).  \n\nBut that previous post was ***full*** of math, and I wanted to make some visualizations to show how the temperature changed. So I decided to simulate for a longer time and build some cool visuals. Since the time window is 10 hours, this is a bit of a \"toy model.\" (In physics, we call something a toy model when it has a feature that is clearly unrealistic, but helps us develop our intuition for a system, better understand how a key aspect effects a system, and/or develop tools for visualizing or analyzing a system.) But it should give me something to visualize. Later (not in this post) I will do some astrophysics to get the sun moving properly, and handle the latitude correctly so I can come back to earth.\n\n## Code\nImport block:\n\n::: {#37bacb16 .cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mc\nimport matplotlib.cm as cm\nfrom scipy.integrate import solve_ivp\n# The functions in `hotBoxToy` were developed in the previous post\nfrom hotBoxToy import *\n```\n:::\n\n\nParameters are input in the code below, and the simulation runs based on the fit parameters from the previous analysis\n\n::: {#1b952e2d .cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\n# Heat parameters\nthermalDiffusivity = 22.39e-6 # meters^2/s for air\nheatTransferCoef = 1 # For a typical metal to air W/m^2K\nthermalConductivity = 50 # For a typical metal W/mK\nspecificHeat = 1000 # for aluminum J/kg K\nwallDensity = 3000 # kg/m^3 for aluminum\nwallThickness = 0.002 # m\nsolarIntensity = 1000 # W/m^2\n\n# Length parameters (meters)\nL = 3\nW = 2\nH = 1.5\n\nDeltax = 0.05\nxmax = int(L/Deltax)\nymax = int(W/Deltax)\nzmax = int(H/Deltax)\n\nxmid = xmax // 2\nymid = ymax // 2\nzmid = zmax // 2\n\nxgrid = np.linspace(0,L,xmax+1)\nygrid = np.linspace(0,W,ymax+1)\nzgrid = np.linspace(0,H,zmax+1)\n\nu0 = np.empty((xmax,ymax,zmax))\n\noneHour = 3600\n# Best parameters from previous simulation\nA = 1.1176e-3\nB = 6.6667e-3\nlongCalc = simToyHotBox(A,B,oneHour*10, 100)    \n```\n:::\n\n\n## Visualizations\nAnd now we have the pretty pictures. First we can observe how the heat changes in time.\n\n![](hotBoxToyViz241210.gif){width=90%}\nMany of the changes in this animation happens fast. As the Humane society stated, the car gets very hot, very fast. Please don't leave your pets/kids/anything alive in a car baking in the sunlight.  In fact, [fellow Valparaiso University Beacon, Matthew Standridge](https://www.instagram.com/p/CfsLvH2jEFs/?hl=en&img_index=1) used his van for baking cookies and cinnamon buns. I hope they were tasty!\n\nBack to this system--Below is a figure with 4 heatmaps on it showing the system at four times that are during this change in behavior.\n\n::: {#9137a7ee .cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\ntimeIdx = [10, 20, 40, 80]\nxm, ym, zm = u0.shape\nY,X,Z = np.meshgrid(np.linspace(0,W,ym),np.linspace(0,L,xm),np.linspace(0,H,zm))\n \nkw = {\n    'vmin': longCalc.y.min(),\n    'vmax': longCalc.y.max(),\n    'levels': np.linspace(longCalc.y.min(),longCalc.y.max(), 10),\n}\n\ncnorm = mc.Normalize(vmin=longCalc.y.min(),vmax=longCalc.y.max())\ncbar = cm.ScalarMappable(norm=cnorm)\n\n# Set limits of the plot from coord limits\nxmin, xmax = 0, L\nymin, ymax = 0, W\nzmin, zmax = 0, H\nxt = np.arange(0,L+0.5,0.5)\nyt = np.arange(0,W+0.5,0.5)\nzt = np.arange(0,H+0.5,0.5)\n\ni = 0\nfig = plt.figure(figsize=(8,7))\ncellList = [221,222,223,224]\nfor cell in cellList:\n    l = timeIdx[i]\n    theTime = longCalc.t[l]\n    theTitle = f'Hot Box at t = {theTime:.0f} s'\n    umatFlat = longCalc.y[:,l]\n    umat = umatFlat.reshape((xm,ym,zm))\n    ax = fig.add_subplot(cell, projection='3d')\n    # Set title, limits, and labels\n    ax.set_title(theTitle)\n    ax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax],xlabel='X [m]',ylabel='Y [m]',zlabel='Z [m]',\n          xticks=xt,yticks=yt,zticks=zt)\n    # Set zoom and angle view\n    ax.view_init(40, -45, 0)\n    ax.set_box_aspect((xm,ym,zm), zoom=0.85)\n    ax.contourf(X[:, :, -1], Y[:, :, -1], umat[:, :, -1],\n                    zdir='z', offset=H, **kw)\n    ax.contourf(X[:, 0, :], umat[:, 0, :], Z[:, 0, :],\n                    zdir='y', offset=0, **kw)\n    ax.contourf(umat[-1, :, :], Y[-1, :, :], Z[-1, :, :],\n                    zdir='x', offset=L, **kw)\n    i += 1\n\nghLogo = u\"\\uf09b\"\nliLogo = u\"\\uf08c\"\ntxt = f\"{ghLogo} datawolf04 {liLogo} steven-wolf-253b6625a\"\nfig.subplots_adjust(bottom=0.05,right=0.8)\nplt.figtext(0.7,0.01, txt,family=['DejaVu Sans','FontAwesome'],fontsize=10)\ncbar_ax = fig.add_axes([0.9, 0.05, 0.02, 0.7])\nfig.colorbar(cbar, cax=cbar_ax,label='Temperature [deg C]')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hotBoxViz_files/figure-html/cell-4-output-1.png){width=728 height=618}\n:::\n:::\n\n\nThese show a few features of importance:\n\n- *Symmetry* in several ways. For example, if consider a point on the left side surface $(x,0,z)$, you should get the same temperature at the point $(L-x,0,z)$. Similar statements can be made for the front surface and the top surface.  That is why I did not show the right, rear and bottom surfaces in this visualization.\n- *The top gets hot* -- plenty hot. Like [fry an egg on it, hot](https://www.usatoday.com/story/life/food-dining/2022/07/29/can-you-fry-egg-sidewalk-car/10048288002/). Note that 180 deg C is about 350 deg F. That's plenty hot to cook eggs. Based on the plot from the previous post, you can see that the top of the box gets to about 100 deg C at the hour mark--appropriate for boiling water.\n- *The sides stay cool* -- as discussed previously, there is still going to be conduction going on, so the box doesn't reach a uniform temperature.\n\n### Amimation generation code\nFiguring out how to do the animation was an interesting task, especially since most of the examples in the documentation animate things like a position vs. time graph, showing where the object appears later in the motion, and dealing with 3d plots is different in matplotlib. The key to using this method for animating a figure is to name all of the features of the graph that are changing, and creating a function to update each of these features.\n\n::: {#438231f4 .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.animation as animation\n\ndef makeAni(fname,res,L,W,H,dx):\n    print(\"Building the animation\")\n    # Create figure with 3D axes\n    fig = plt.figure(figsize=(6,4))\n    ax = fig.add_subplot(111, projection='3d')\n    # Fill in the plot\n    theTime = res.t[0]\n    tmax = len(res.t)\n    theTitle = f'Hot Box at t = {theTime:.0f} s'\n    figTitle = fig.suptitle(theTitle)\n\n    xm, ym, zm = int(L/dx), int(W/dx), int(H/dx)\n    uflat = res.y[:,0]\n    umat = uflat.reshape((xm,ym,zm))\n    Y,X,Z = np.meshgrid(np.linspace(0,W,ym),np.linspace(0,L,xm),np.linspace(0,H,zm))\n\n    kw = {\n        'vmin': res.y.min(),\n        'vmax': res.y.max(),\n        'levels': np.linspace(res.y.min(),res.y.max(), 10),\n    }\n    cnorm = mc.Normalize(vmin=res.y.min(),vmax=res.y.max())\n    cbar = cm.ScalarMappable(norm=cnorm)\n    \n    # Plot contour surfaces\n    topSurf = ax.contourf(X[:, :, -1], Y[:, :, -1], umat[:, :, -1], zdir='z', offset=H, **kw)\n    frontSurf = ax.contourf(X[:, 0, :], umat[:, 0, :], Z[:, 0, :], zdir='y', offset=0, **kw)\n    leftSurf = ax.contourf(umat[-1, :, :], Y[-1, :, :], Z[-1, :, :], zdir='x', offset=L, **kw)\n    # --\n\n    # Set limits of the plot from coord limits\n    xmin, xmax = 0, L\n    ymin, ymax = 0, W\n    zmin, zmax = 0, H\n    ax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\n\n    # Set labels \n    ax.set(\n        xlabel='X [m]',\n        ylabel='Y [m]',\n        zlabel='Z [m]',\n        xticks = np.arange(0,L+0.5,0.5),\n        yticks = np.arange(0,W+0.5,0.5),\n        zticks = np.arange(0,H+0.5,0.5),\n    )\n\n    # Set zoom and angle view\n    ax.view_init(40, -45, 0)\n    ax.set_box_aspect((xm,ym,zm), zoom=1)\n\n    # Colorbar\n    fig.subplots_adjust(left=-1.75,bottom=0.2,right=0.9)\n    fig.colorbar(cbar, ax=ax, fraction=0.02, pad=0.075, \n      label='Temperature [deg C]')\n    ghLogo = u\"\\uf09b\"\n    liLogo = u\"\\uf08c\"\n    txt = f\"{ghLogo} datawolf04 {liLogo} steven-wolf-253b6625a\"\n    plt.figtext(0.5,0.01, txt,family=['DejaVu Sans','FontAwesome'],fontsize=10)\n\n    def update(l):\n        if (l+1)%10==0:\n            print(f\"Working on frame {l+1} out of {tmax}.\")\n        uflat = res.y[:,l]\n        umat = uflat.reshape((xm,ym,zm))\n        theTime = res.t[l]\n        theTitle = f'Hot Box at t = {theTime:.0f} s'\n        figTitle = fig.suptitle(theTitle)\n        topSurf = ax.contourf(X[:, :, -1], Y[:, :, -1], umat[:, :, -1], zdir='z', \n          offset=H, **kw)\n        frontSurf = ax.contourf(X[:, 0, :], umat[:, 0, :], Z[:, 0, :], zdir='y', \n          offset=0, **kw)\n        leftSurf = ax.contourf(umat[-1, :, :], Y[-1, :, :], Z[-1, :, :], \n          zdir='x', offset=L, **kw)\n\n        return topSurf, frontSurf, leftSurf, figTitle\n\n    ani = animation.FuncAnimation(fig=fig, func=update, frames=tmax, \n      interval=50, repeat=False)\n    ani.save(fname,writer='pillow')    \n\n# Builds the animation\nmakeAni('hotboxLong.gif',longCalc,L,W,H,Deltax)\n```\n:::\n\n\n",
    "supporting": [
      "hotBoxViz_files"
    ],
    "filters": [],
    "includes": {}
  }
}
{
  "hash": "9799f8d8fa2132f87ef77811301524e0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Modeling Heat Flow - Part 3\"\ndescription: \"Modeling the sun\"\nauthor: \"Steven Wolf\"\ndate: \"12/13/2024\"\nnumber-sections: false\ncategories:\n  - Heat Equation\n  - Astrophysics\n  - Python\n  - Modeling\n  - 3D system\n  - Finite Difference Method\n  - Animating Plots\nexecute: \n  messages: false\n  warning: false\njupyter: python3\ndraft:\n  true\n---\n\n\n## Overview\n\nI've been in the weeds on this for a while, so it's time to zoom back to the big picture. Specifically, I'm working on a model of heat flow in my house because it gets hot in parts of my house during the summer even with the AC going full blast.  I've written a series of posts [introducing the heat equation](../heatEqn1/modelHeatFlow.qmd), [modeling solar heat generation](../heatEqn2/heatEqn2.qmd), and [visualizing the dynamics of a simple system](../heatEqn2/hotBoxViz.qmd). However, the limiting approximation being made was that the sun's rays were directly incident on the top surface **at all times**. This made the calculation easy, but is clearly not realistic.  This is going to be a little mathy, but I can make some pictures to support the mathematics.\n\n## Locating the sun\n\nThe location of the sun is important because the power deposited into a surface from any light source is related to the angle of incidence. Consider the figure below:\n\n![](surface.png){fig-align=\"center\" width=400} \n\nThe orange ray indicates the direction of the sunlight at the surface, and the dotted line indicates the direction of the line which is perpendicular to the surface. The power generated in the surface due to sunlight will be:\n$$\nP = I_{\\text{Sun}} A \\cos^2\\beta\n$$\nwhere $I_\\text{sun}$ is the intensity of the sunlight and $A$ is the area of the surface.  This assumes things like the size of the surface is much smaller than the distance from that surface to the sun. But this angle depends on the following:\n\n- The orientation of the surface relative to the surface of the earth. For example is it horizontal or vertical? And if it is vertical (like a wall) is it facing north or east?\n- The time of day. As we learn in grade school, the sun rises in the east and sets in the west.\n- The latitude of the surface.\n- The time of year.\n\nGiven all of these things, it is not as simple as stating that the sun starts at $\\beta=-90\\deg$ at sunrise and sets at $\\beta=+90\\deg$.  So I'm going to develop a framework for calculating this.\n\n### Terrestrial coordinate system\nI'm going to develop a terrestrial coordinate system so that I can calculate the angle of incidence.  I'll begin by considering the tilt of the earth's rotation axis relative to the direction of sunlight. In the figures below, sunlight is in the direction of the yellow rays, the earth is at the origin of the coordinate system, and the z direction is the earth's rotation axis. (I'm indicating the poles by the white blobs on the sphere).\n\n![](seasons.png){fig-align=\"center\" width=800} \n\nWe know that seasons change because the sun's ray's are more/less direct at different latitudes, and this changes because the angle of the earth's rotation axis changes relative to the direction of sunlight.  I've labeled this angle $\\alpha$ in the figure above. We know that it varies from $+23.5 \\deg$ to $-23.5 \\deg$ on the winter solstice and the summer solstice respectively. On the equinoxes, $\\alpha=0 \\deg$ as depicted above.  We can write a function for $\\alpha$ as follows:\n\n$$\n\\alpha(T) = \\alpha_0 \\cos(\\Omega_y T)\n$$\nwhere $T$ is the number of days after the winter solstice, and $\\Omega_y = \\frac{2\\pi}{1\\,\\text{yr}}$ is the angular frequency of 1 year.\n\n::: {#c6687705 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\ndef axisTilt(T):\n  maxTilt = 23.5\n  omegaYear = 2*np.pi\n  axisTilt = maxTilt * np.cos(omegaYear*T)\n```\n:::\n\n\nSince we need to account for changing $\\alpha$, I will need to include as a variable, this is done on the figure below. I will now use this to determine the direction of the sun's rays $\\hat{R}$ in terms of the earth's coordinate system. To aid in this, I will choose the $xz$ plane to be in the plane of the drawing, and the sun's rays will be along the unit vectors in the $x$ and $z$ directions as follows:\n\n$$\n\\hat{R} = \\cos\\alpha \\hat{i} + \\sin\\alpha \\hat{k}\n$$\n\n![](earthViz.png){fig-align=\"center\" width=600} \n\nIf we consider a point on the surface of the earth, it will be useful to use spherical coordinates.  The unit vectors in the $\\hat{r}$ and $\\hat{\\theta}$ directions are depicted on the drawing above ($\\hat{\\phi}$ is into the screen at the location given).  We know that the spherical unit vectors are:\n\n\\begin{align*}\n  \\hat{r} &= \\sin\\theta\\cos\\phi \\hat{i} + \\sin\\theta\\sin\\phi \\hat{j} + \\cos\\theta \\hat{k} \\\\\n  \\hat{\\theta} &= \\cos\\theta\\cos\\phi \\hat{i} + \\cos\\theta\\sin\\phi \\hat{j} -\\sin\\theta\\hat{k} \\\\\n  \\hat{\\phi} &= -\\sin\\phi \\hat{i} + \\cos\\phi\\hat{j} \\\\\n\\end{align*}\n\nUsing this coordinate system allows us to interpret several things. First, the polar angle is related to the angle of latitude.\n$$\n\\theta = 90\\deg - \\theta_{L}\n$$\nwhere $\\theta_L$ is the angle of Latitude at the location of interest (North latitude is positive, South latitude is negative.) Yes, I'm using degrees. Yes, it feels kind of dirty. I'll have to convert to radians when I code, but when I look up my current latitude, I'm getting degrees. This has the meaning that:\n$$\n\\sin{\\theta} = \\cos\\theta_L \\quad \\text{and} \\cos\\theta = \\sin\\theta_L\n$$\n\nNext, the time of day can be related to the azimuthal angle:\n$$\n\\phi = \\Omega t\n$$\nwhere $\\Omega = \\frac{2\\pi}{1 \\text{ day}}$ is the angular frequency of the earth's rotation. So $\\phi=0$ implies $t=0$, which is solar midnight.\n\nFinally, we can also state that the unit vectors noted above are related to the cardinal directions and the local vertical. That is $\\hat{r}$ is the local vertical direction, $\\hat{\\theta}$ points South, and $\\hat{\\phi}$ points East.\n\n### Day/night\nConsider the dot product:\n$$\n\\hat{R}\\cdot\\hat{r} = \\cos\\alpha\\cos\\theta_L\\cos(\\Omega t) + \\sin\\alpha\\sin\\theta_L\n$$\nIf this product is positive, the point of interest is on the night-side of the planet, and if negative, the point of interest is on the day-side of the planet. If this product is 0, then that point is at sunrise or sunset. Let's turn this into a function to determine if it is daytime given the time of day, latitude, and axis tilt.\n\n::: {#97ba5285 .cell execution_count=2}\n``` {.python .cell-code}\ndef isDaylight(t,axisTilt,thetaLatitude):\n  oneDay = 24*60*60 # seconds\n  Omega = 2*np.pi/oneDay\n  alpha = axisTilt*np.pi/180\n  thetaL = thetaLatitude*np.pi/180\n  rDotR = np.cos(alpha)*np.cos(thetaL)*np.cos(Omega*t) + np.sin(alpha)*np.sin(thetaL)\n  if rDotR > 0:\n    isDay = False\n  else:\n    isDay = True\n  \n  return isDay\n```\n:::\n\n\nNote, that we can determine the sunrise/sunset times if we set the dot product above equal to zero and solve the following equation for $t$:\n$$\n\\cos(\\Omega t) = - \\tan\\alpha \\tan\\theta_L\n$$\nImplicitly, we are restricting $t$ to be less than one solar day.  Below, I will use this to determine the length of the summer and winter solstice days here in Greenville, NC (Latitude = $35.6 \\deg$ N).\n\n::: {#0336e7e3 .cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\ndef dayCalc():\n  oneDay = 24 # hours\n  Omega = 2 * np.pi / oneDay\n  alphaMax = 23.5*np.pi/180\n  greenvilleLatitude = 35.6*np.pi/180\n  \n  winterSolTime = 24-2*np.arccos(-np.tan(+alphaMax)*np.tan(greenvilleLatitude))/Omega\n  summerSolTime = 24-2*np.arccos(-np.tan(-alphaMax)*np.tan(greenvilleLatitude))/Omega\n  print(f'The summer solstice has {summerSolTime:.1f} hours of sunlight in Greenville, NC.')\n  print(f'The winter solstice has {winterSolTime:.1f} hours of sunlight in Greenville, NC.')\n  \ndayCalc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe summer solstice has 14.4 hours of sunlight in Greenville, NC.\nThe winter solstice has 9.6 hours of sunlight in Greenville, NC.\n```\n:::\n:::\n\n\n### Solar power generation on a box\n\nSo back to the simple box system, I can set up my box so that it has two faces in the N/S direction, and two faces in the E/W direction.\n\n",
    "supporting": [
      "heatAstroModel_files"
    ],
    "filters": [],
    "includes": {}
  }
}
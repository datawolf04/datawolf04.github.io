{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Using the Heat Equation to model a real-world system (Part 2)\"\n",
        "description: \"Why is this so gosh-darn hard sometimes?\"\n",
        "author: \"Steven Wolf\"\n",
        "date: \"07/14/2025\"\n",
        "number-sections: false\n",
        "categories:\n",
        "  - Heat Equation\n",
        "  - Modeling\n",
        "  - Classroom Models vs Realistic Models\n",
        "execute: \n",
        "  messages: false\n",
        "  warning: false\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "In my last post, I spoke about the issues with modeling a real-world system using the heat equation. Even the simplest 1D system promised some degree of pain. So I wanted to begin discussing numerical methods. I've been going through some materials created by the [fenics project](https://jsdokken.com/dolfinx-tutorial/index.html), and while what I'm presenting below will be somewhat based on those methods, I'm going to skip using their package (for now).\n",
        "\n",
        "## Applying the Finite Element Method to the 1D Robin problem\n",
        "In my [last post](./HeatEquationReset.qmd), I gave myself the following challenge:\n",
        "\n",
        "> Your mission, should you choose to accept it, is to model a 1D object that has a length of 1, with a uniform initial temperature $T_0$. The exterior temperature at each end of the rod is 0. Assume no heat escapes along the length of the rod.\n",
        "\n",
        "Let's apply the Finite Element method to this problem. In general the setup is the same. We have:\n",
        "1. The (1D) Heat Equation:\n",
        "$$\n",
        "\\frac{\\partial u(x,t)}{\\partial t} - \\frac{\\partial^2 u(x,t)}{\\partial x^2} = 0\n",
        "$$\n",
        "2. The Initial Condition: $u(x,0)=T_0$.\n",
        "3. The Boundary conditions, one for each end at $x=0$ and $x=1$\n",
        "$$\n",
        "u(0,t) + b \\left. \\frac{\\partial u(x,t)}{\\partial x}\\right|_{x=0} = 0 \\qquad \\text{and} \\qquad u(1,t) - b\\left. \\frac{\\partial u(x,t)}{\\partial x}\\right|_{x=1} = 0\n",
        "$$\n",
        "\n",
        "### Step 1: Discretize the time variable.\n",
        "Instead of doing separation of variables using the usual analytic methods, we are going to define:\n",
        "\n",
        "$$\n",
        "u^k(x) = u(x,t_k)\n",
        "$$\n",
        "where $t_k = k \\Delta t$. The parameter $\\Delta t$ is something that can be freely chosen, and $k$ is an index $(0,1,2,\\ldots)$. Substituting this in, we can write the following:\n",
        "1. The (1D) Heat Equation:\n",
        "$$\n",
        "\\frac{u^k(x)-u^{k-1}(x)}{\\Delta t} - \\frac{d^2 u^k(x)}{dx^2} = 0\n",
        "$$\n",
        "2. The Initial condition:\n",
        "$$\n",
        "u^0(x) = T_0\n",
        "$$\n",
        "3. The boundary conditions:\n",
        "$$\n",
        "u^k(0) + b \\left. \\frac{du^k(x)}{dx}\\right|_{x=0} = 0 \\qquad \\text{and} \\qquad u^k(1) - b \\left. \\frac{du^k(x)}{dx}\\right|_{x=1} = 0\n",
        "$$\n",
        "\n",
        "### Step 2: Convert the Heat Equation to a weak formulation\n",
        "This is done by multiplying the PDE by a *test function* $v(x)$ and integrating over the region of interest (in this case, $x\\in[0,1]$).\n",
        "$$\n",
        "\\int_0^1 v(x) u^k(x) dx - \\Delta t \\int_0^1 v(x) \\frac{d^2u^k(x)}{dx^2} dx = \\int_0^1 v(x) u^{k-1}(x) dx\n",
        "$$\n",
        "\n",
        "We can now integrate the second term by parts:\n",
        "$$\n",
        "\\begin{align*}\n",
        "\\int_0^1 v(x) \\frac{d^2u^k(x)}{dx^2} dx  &= \\left[ v(x) \\frac{du^k(x)}{dx} \\right]_0^1 - \\int_0^1 \\frac{dv(x)}{dx} \\frac{du^k(x)}{dx} dx \\\\\n",
        "  &= \\left[ -v(1) \\frac{u^k(1)}{b}  - v(0) \\frac{u^k(0)}{b} \\right] - \\int_0^1 \\frac{dv(x)}{dx} \\frac{du^k(x)}{dx} dx \\\\\n",
        "\\end{align*}\n",
        "$$\n",
        "where the term in square brackets is given by applying the boundary conditions. So now we have two things to keep track of:\n",
        "\n",
        "1. The Initial condition:\n",
        "$$\n",
        "u^0(x) = T_0\n",
        "$$\n",
        "2. The weak formulation of the PDE/boundary condition\n",
        "$$\n",
        "\\begin{align*}\n",
        "\\int_0^1 v(x) u^{k-1}(x) dx = \\int_0^1 v(x) u^k(x) dx &+ \\Delta t \\int_0^1 \\frac{dv(x)}{dx} \\frac{du^k(x)}{dx} dx \\\\\n",
        " & + \\frac{\\Delta t}{b} \\left[ v(1) u^k(1) + v(0) u^k(0) \\right]\n",
        "\\end{align*}\n",
        "$$\n",
        "Notice that the LHS of this equation depends on the test function $v(x)$ and the solution of the heat equation at the *previous* time-step $u^{k-1}(x)$.\n",
        "\n",
        "### Step 3: Discretize the spatial variable\n",
        "Ultimately, this step will allow us to solve this problem as a linear-algebra problem, which is something that computers have been optimized to do very well. We do this by assuming the following:\n",
        "$$\n",
        "u^k(x) = \\sum_{j=1}^N u_j^k \\varphi_j(x)\n",
        "$$\n",
        "where $x_j = \\frac{j-1}{N-1}$, $h=\\frac{1}{N}$ and\n",
        "$$\n",
        "\\varphi_j(x) = \n",
        "\\begin{cases}\n",
        "\\left(1-\\frac{\\left|x-x_j\\right|}{h}\\right) &\\left|x-x_j\\right|\\leq h \\\\\n",
        "0 & \\text{else}\n",
        "\\end{cases}\n",
        "$$\n",
        "This creates a uniform lattice of points. It should be noted that this choice of $\\varphi_j(x)$ is method dependant. Also, when working in higher dimensions, a cartesian grid is not optimal. But this is what I'll use for this problem.\n",
        "\n",
        "\n",
        "#### Simplify the Initial condition\n",
        "Let's insert this definition of $u^k(x)$ into our initial condition, multiply by $\\varphi_i(x)$, and integrate over the region of interest:\n",
        "$$\n",
        "\\int_0^1 dx \\varphi_i(x) \\sum_{j=1}^N u^0_j \\varphi_j(x) = \\int_0^1 dx \\varphi_i(x) T_0\n",
        "$$\n",
        "We can simplify this by calculating the integrals:\n",
        "$$\n",
        "\\int_0^1 dx \\varphi_i(x) = \n",
        "\\begin{cases}\n",
        "\\frac{h}{2} &i=1 \\text{ or } i=N \\\\\n",
        "h & \\text{else}\n",
        "\\end{cases}\n",
        "$$\n",
        "and\n",
        "$$\n",
        "\\int_0^1 dx \\varphi_i(x) \\varphi_j(x) = \n",
        "\\begin{cases}\n",
        "\\frac{h}{3} & (i=j=1) \\text{ or } (i=j=N) \\\\\n",
        "\\frac{2h}{3} & (i=j) \\text{ and } (i\\neq 1 \\text{ or } i\\neq N) \\\\\n",
        "\\frac{h}{6} & j=i\\pm 1 \\\\\n",
        "0 &\\text{else}\n",
        "\\end{cases}\n",
        "$$\n",
        "\n",
        "Re-arranging terms, we can find $N$ equations:\n",
        "$$\n",
        "\\begin{align*}\n",
        "2 u_1^0 + u_2^0 = 3 T_0 &\\qquad i=1 \\\\\n",
        "u_{i-1}^0 + 4 u_i^0 + u_{i+1}^0 = 6 T_0 &\\qquad i\\neq 1, i\\neq N \\\\\n",
        "u_{N-1}^0 + 2u_N^0 = 3 T_0 &\\qquad i=N\n",
        "\\end{align*}\n",
        "$$\n",
        "\n",
        "Since the initial temperature is uniform, this (quite sensibly) can be solved as:\n",
        "$$\n",
        "u_i^0 = T_0\n",
        "$$\n",
        "\n",
        "\n",
        "\n",
        "#### Simplify the weak formulation\n",
        "Next we will simplify the weak formulation describing the PDE and Boundary conditions assuming\n",
        "$$\n",
        "u^k(x) = \\sum_{j=1}^N u_j^k \\varphi_j(x)\n",
        "$$\n",
        "and \n",
        "$$\n",
        "v(x) = \\varphi_i(x)\n",
        "$$\n",
        "\n",
        "Plugging this in we get:\n",
        "$$\n",
        "\\begin{align*}\n",
        "\\sum_{j=1}^N u_j^{k-1} \\int_0^1 dx \\varphi_i(x) \\varphi_j(x) = &\\sum_{j=1}^N u_j^k \\int_0^1 dx \\varphi_i(x) \\varphi_j(x) \\\\\n",
        " &+ \\sum_{j=1}^N \\Delta t u_j^k \\int_0^1 dx \\frac{d\\varphi_i(x)}{dx} \\frac{d\\varphi_j(x)}{dx} \\\\\n",
        " &+ \\frac{\\Delta t}{b} \\sum_{j=1}^N \\left[ \\varphi_i(1) u^k_j \\varphi_j(1) + \\varphi_i(0) u^k_j \\varphi_j(0) \\right]\n",
        "\\end{align*}\n",
        "$$\n",
        "\n",
        "We can simplify this again, but we will need to consider the integral below in addition to other integrals we have calculated previously.\n",
        "$$\n",
        "\\int_0^1 dx \\frac{d\\varphi_i(x)}{dx} \\frac{d\\varphi_j(x)}{dx} = \n",
        "\\begin{cases}\n",
        "\\frac{1}{h} & (i=j=1) \\text{ or } (i=j=N) \\\\\n",
        "\\frac{2}{h} & (i=j) \\text{ and } (i\\neq 1 \\text{ or } i\\neq N) \\\\\n",
        "-\\frac{1}{h} & j=i\\pm 1 \\\\\n",
        "0 &\\text{else}\n",
        "\\end{cases}\n",
        "$$\n",
        "\n",
        "\n",
        "Finally, we will note that by the definition of our $\\varphi_i(x)$ function, we can simplify the values on the boundary as follows:\n",
        "$$\n",
        "\\varphi_i(0) = \\delta_{i1} \\qquad \\text{and} \\qquad \\varphi_i(1) = \\delta_{iN}\n",
        "$$\n",
        "\n",
        "This leaves us with the following system of $N$ equations to solve:\n",
        "$$\n",
        "\\begin{align*}\n",
        "2\\left(1+\\frac{3(b+h)\\Delta t}{bh^2}\\right) u_0^k + \\left(1-\\frac{6\\Delta t}{h^2}\\right)u_1^k &= 2u_0^{k-1} + u_1^{k-1} \\quad i=1 \\\\\n",
        "\\left(1-\\frac{6\\Delta t}{h^2}\\right)u_{N-1}^k + 2\\left(1+\\frac{3(b+h)\\Delta t}{bh^2}\\right) u_N^k &= u_{N-1}^{k-1} + 2u_N^{k-1} \\quad i=N \\\\\n",
        "\\left(1-\\frac{6\\Delta t}{h^2}\\right)u_{i-1}^k + 4\\left(1+\\frac{3\\Delta t}{h^2}\\right) u_i^k + \\left(1-\\frac{6\\Delta t}{h^2}\\right)u_{i+1}^k &= u_{i-1}^{k-1} + 4u_i^{k-1} + u_{i+1}^{k-1}  \\\\\n",
        " &\\qquad i\\neq 1 \\text{ and } i\\neq N \\\\\n",
        "\\end{align*}\n",
        "$$\n",
        "\n",
        "This looks somewhat intimidating, but if we define:\n",
        "$$\n",
        "A = 2\\left(1+\\frac{3(b+h)\\Delta t}{bh^2}\\right) \\quad B=4\\left(1+\\frac{3\\Delta t}{h^2}\\right) \\quad C=\\left(1-\\frac{6\\Delta t}{h^2}\\right)\n",
        "$$\n",
        "we get\n",
        "$$\n",
        "\\begin{align*}\n",
        "A u_0^k + C u_1^k &= 2u_0^{k-1} + u_1^{k-1} &\\quad i=1 \\\\\n",
        "C u_{N-1}^k + A u_N^k &= u_{N-1}^{k-1} + 2u_N^{k-1} &\\quad i=N \\\\\n",
        "Cu_{i-1}^k + B u_i^k + Cu_{i+1}^k &= u_{i-1}^{k-1} + 4u_i^{k-1}  + u_{i+1}^{k-1}&\\quad i\\neq 1 \\text{ and } i\\neq N \\\\\n",
        "\\end{align*}\n",
        "$$\n",
        "We can turn this into a matrix equation:\n",
        "$$\n",
        "K U = G\n",
        "$$\n",
        "where $U$ is a $(N\\times 1)$ matrix made up of the $u_i^k$'s, $K$ is (assuming $N=5$)\n",
        "\n",
        "$$\n",
        "K =\n",
        "\\begin{bmatrix}\n",
        "A & C & 0 & 0 & 0 \\\\\n",
        "C & B & C & 0 & 0 \\\\\n",
        "0 & C & B & C & 0 \\\\\n",
        "0 & 0 & C & B & C \\\\\n",
        "0 & 0 & 0 & C & A \n",
        "\\end{bmatrix}\n",
        "$$\n",
        "and $G = G_s u^{k-1}$ is made from the right hand side of the above equation:\n",
        "\n",
        "$$\n",
        "G_s = \n",
        "\\begin{bmatrix}\n",
        "2 & 1 & 0 & 0 & 0 \\\\\n",
        "1 & 4 & 1 & 0 & 0 \\\\\n",
        "0 & 1 & 4 & 1 & 0 \\\\\n",
        "0 & 0 & 1 & 4 & 1 \\\\\n",
        "0 & 0 & 0 & 1 & 2 \n",
        "\\end{bmatrix}\n",
        "$$\n",
        "and\n",
        "$$\n",
        "u^{k-1} = \n",
        "\\begin{bmatrix}\n",
        "u^{k-1}_1 \\\\\n",
        "u^{k-1}_2 \\\\\n",
        "u^{k-1}_3 \\\\\n",
        "u^{k-1}_4 \\\\\n",
        "u^{k-1}_5 \n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "## Let's make code!\n",
        "Let's make some computational choices and code this up. First, I'll begin by setting up the initial condition."
      ],
      "id": "5e74aff8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "\n",
        "N = 101\n",
        "h = 1/(N-1)\n",
        "initTemp = 10\n",
        "xi = np.linspace(0,1,N)\n",
        "u0 = initTemp * np.ones(N)"
      ],
      "id": "bdadc240",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Next, I'll define the matrices on the LHS and RHS of the equation above, as well as a few parameters."
      ],
      "id": "3dc53be6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "b = 1\n",
        "Dt = 0.1\n",
        "tMax = 3\n",
        "tVals = np.arange(0,tMax, Dt)\n",
        "\n",
        "A = 2*(1 + 3*Dt*(b+h)/(b*h**2))\n",
        "B = 4*(1 + 3*Dt/h**2)\n",
        "C = 1 - 6*Dt/h**2\n",
        "\n",
        "## Left hand side\n",
        "K = np.zeros([N,N])\n",
        "Gsq = np.zeros([N,N])\n",
        "for i in range(1,N-1):\n",
        "  K[i,i] = B\n",
        "  K[i, i-1] = C\n",
        "  K[i, i+1] = C\n",
        "  Gsq[i,i] = 4\n",
        "  Gsq[i,i-1] = 1\n",
        "  Gsq[i,i+1] = 1\n",
        "\n",
        "K[0, 0:2] = [A, C]\n",
        "K[N-1, N-2:] = [C, A]\n",
        "Gsq[0, 0:2] = [2,1]\n",
        "Gsq[N-1, N-2:] = [1,2]"
      ],
      "id": "a07fdfd6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Python can find the new u-matrix in terms of the old u matrix in one line:"
      ],
      "id": "9e50e206"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "newU = np.linalg.solve(K,G)"
      ],
      "id": "71059692",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "So let's build our solution:"
      ],
      "id": "532bce19"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "nSteps = int(tMax/Dt)\n",
        "U = np.zeros([N,nSteps])\n",
        "for k in range(nSteps):\n",
        "  if(k==0):\n",
        "    newU = np.ones(N) * initTemp\n",
        "  else:\n",
        "    G = np.matmul(Gsq,oldU)\n",
        "    newU = np.linalg.solve(K,G)\n",
        "  U[:, k] = newU    \n",
        "  oldU = newU"
      ],
      "id": "a296c0e3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "And let's make a nice 3D plot of the solution:"
      ],
      "id": "976338eb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "T, X = np.meshgrid(tVals, xi)\n",
        "\n",
        "fig = plt.figure()\n",
        "ax = fig.add_subplot(111, projection='3d')\n",
        "ax.plot_surface(T,X,U,cmap='magma')\n",
        "ax.set_xlabel(r'$t$')\n",
        "ax.set_ylabel(r'$x$')\n",
        "ax.set_zlabel(r'$u$')\n",
        "plt.show()"
      ],
      "id": "aeaef523",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## View some solutions:\n",
        "[7/15/25 Minor update: The graph titles were not displaying enough significant digits, so I fixed the display.]\n",
        "\n",
        "Note, that we have a property that can change the dynamics of this system, namely $b$, which is related to the (inverse of the) heat transfer coefficient. For the previous plot $b=1$. Compare to these, where $b=5$ and $b=0.5$:"
      ],
      "id": "e1368983"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| layout-ncol: 2\n",
        "#| echo: false\n",
        "\n",
        "from buildRobinSolution import *\n",
        "\n",
        "uRobin(10,101,5,0.002,5).plotTemp()\n",
        "uRobin(10,101,5,0.002,0.5).plotTemp()"
      ],
      "id": "d27f32f8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Let's compare this to the Dirichlet solution from the previous post. Note, there is a minor difference from the previous post. I have re-indexed the sum starting at 0 since python zero-indexes the functions there, and it's just a little cleaner.\n",
        "$$\n",
        "u(x,t) = \\sum_{n=0}^{\\infty} \\frac{4T_0}{(2n+1)\\pi}\\sin\\left((2n-+)\\pi x\\right) e^{-(2n+1)^2\\pi^2t}\n",
        "$$\n",
        "First, let's note that the only free parameter here is the initial temperature $T_0$. There is no equivalent to the \"inverse heat transfer coefficient\" $b$ that I defined for the Robin problem."
      ],
      "id": "59d6e4b1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def uDirichelet(t,x,T0):\n",
        "  uD = 0\n",
        "  for n in range(200):\n",
        "    term = 4*T0/((2*n+1)*np.pi) * np.sin((2*n+1)*np.pi*x) * np.exp(-(2*n+1)**2 * np.pi**2 * t)\n",
        "    uD += term\n",
        "  return uD\n",
        "\n",
        "uD = np.zeros(U.shape)\n",
        "for i in range(len(tVals)):\n",
        "  for j in range(len(xi)):\n",
        "    uD[j,i] = uDirichelet(tVals[i],xi[j],initTemp)\n",
        "\n",
        "fig = plt.figure()\n",
        "fig.suptitle(\"Temperature of 1D bar with Dirichelet boundary conditions\")\n",
        "ax = fig.add_subplot(111, projection='3d')\n",
        "ax.plot_surface(T,X,uD,cmap='magma')\n",
        "ax.set_xlabel(r'$t$')\n",
        "ax.set_ylabel(r'$x$')\n",
        "ax.set_zlabel(r'$u$')\n",
        "plt.show()"
      ],
      "id": "7f912ad9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "This is similar to the Robin plot for a very small $b$ value."
      ],
      "id": "7ccb9c1f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "uRobin(10,101,5,0.002,0.005).plotTemp()"
      ],
      "id": "29d03bd9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Although, it should be noted that this doesn't have the odd bump that the Dirichlet solution has for small time values.\n",
        "\n",
        "## Where to go from here\n",
        "Ok, so I've solved the 1D Robin problem, and compared it to the Dirichlet problem. Why not just make this 3D and roll my own from here?\n",
        "\n",
        "1. I need to redo all the math every time that I do different shapes/boundary conditions. It would sure be nice if someone else would do that for me. Like, programmatically. With a peer-reviewed software package.\n",
        "2. As you go to 2D and 3D, a rectangular grid/mesh is not as numerically appropriate and can lead to unwanted errors. Quoting J.D. Jackson's Graduate Electricity and Magnetism text:\n",
        "\n",
        "> A square lattice is not optimal in many problems because the solution may change more rapidly in some parts of the domain of interest than in other parts. In such regions one wishes to have a finer mesh. An [Finite Element Analysis] method with a standard generic shape, but permitting different sizes, will be more flexible and therefore superior.\n",
        "\n",
        "So, not only would I have to do painstaking math, I'd have to do ***slightly different*** painstaking math. As I have convinced myself that I know how the algorithm works, and why different steps are important, I'm comfortable using externally created code.\n",
        "\n",
        "In my next post, I plan to solve the 1D problems I've solved here using the [FENICS code](https://fenicsproject.org/). And this will let me generalize this to 3D as well as model a more realistic system."
      ],
      "id": "57540a08"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}